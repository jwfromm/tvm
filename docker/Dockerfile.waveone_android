# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.  
# Minimum docker image for demo purposes

# Build in two stages to protect secrets.

FROM ubuntu:16.04 AS intermediate
RUN apt-get update
RUN apt-get install -y git
# Set up waveone tools.
# Add github repo key and check out private repos.
RUN mkdir /root/.ssh/
ADD repo-key /root/.ssh/id_rsa
RUN touch /root/.ssh/known_hosts
RUN ssh-keyscan github.com >> /root/.ssh/known_hosts
RUN cd /usr && \
git clone -b josh/TVMTuning git@github.com:wave-one/main.git

# Second stage.
FROM ubuntu:16.04
RUN apt-get update --fix-missing

COPY install/ubuntu_install_core.sh /install/ubuntu_install_core.sh
RUN bash /install/ubuntu_install_core.sh

COPY install/ubuntu_install_python.sh /install/ubuntu_install_python.sh
RUN bash /install/ubuntu_install_python.sh

COPY install/ubuntu_install_python_package.sh /install/ubuntu_install_python_package.sh
RUN bash /install/ubuntu_install_python_package.sh

COPY install/ubuntu_install_keras.sh /install/ubuntu_install_keras.sh
RUN bash /install/ubuntu_install_keras.sh

COPY install/ubuntu_install_java.sh /install/ubuntu_install_java.sh
RUN bash /install/ubuntu_install_java.sh

COPY install/ubuntu_install_llvm.sh /install/ubuntu_install_llvm.sh
RUN bash /install/ubuntu_install_llvm.sh

COPY install/ubuntu_install_gradle.sh /install/ubuntu_install_gradle.sh
RUN bash /install/ubuntu_install_gradle.sh

COPY install/ubuntu_install_androidsdk.sh /install/ubuntu_install_androidsdk.sh
RUN bash /install/ubuntu_install_androidsdk.sh

COPY install/ubuntu_install_vulkan.sh /install/ubuntu_install_vulkan.sh
RUN bash /install/ubuntu_install_vulkan.sh

ENV VULKAN_SDK /usr/local/VulkanSDK/1.0.65.0/x86_64
ENV PATH ${PATH}:${VULKAN_SDK}/bin
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${VULKAN_SDK}/lib
ENV VK_LAYER_PATH ${VULKAN_SDK}/etc/explicit_layer.d

# Build TVM
COPY --from=intermediate /usr/main /usr/waveone

WORKDIR /usr
RUN git clone -b WaveOne --depth=1 https://github.com/jwfromm/tvm --recursive

# Set up environment variables and run setup script.
ENV TVM_HOME /usr/tvm
ENV WO_ROOT /usr/waveone

RUN cd $WO_ROOT/code/wotvm/scripts && \
    ./setup.sh

# Build TVM
RUN cd /usr/tvm && \
    mkdir -p build && \
    cd build && \
    cmake \
        -DUSE_LLVM=llvm-config-6.0 \
        -DUSE_RPC=ON \
        -DUSE_SORT=ON \
        -DUSE_GRAPH_RUNTIME=ON \
        -DUSE_VULKAN=ON \
        -DUSE_WAVEONE=ON \
        .. && \
    make -j10

# Environment variables
ENV PYTHONPATH=/usr/tvm/python:/usr/tvm/topi/python:/usr/tvm/nnvm/python/:/usr/tvm/vta/python:${PYTHONPATH}
ENV ANDROID_HOME=/opt/android-sdk-linux

WORKDIR $TVM_HOME
RUN make jvmpkg && \
    make jvminstall

WORKDIR $TVM_HOME/apps/android_rpc
COPY android_config.mk $TVM_HOME/apps/android_rpc/src/main/jni/config.mk
RUN gradle clean build

WORKDIR $TVM_HOME/apps/android_deploy
COPY android_config.mk $TVM_HOME/apps/android_deploy/src/main/jni/config.mk
RUN gradle clean build

# Build cross compiler.
WORKDIR /opt/android-sdk-linux/ndk-bundle/build/tools
COPY build_android_cc.sh .
RUN ./build_android_cc.sh

# Install useful python libraries.
RUN pip3 install opencv-python && \
                 tensorflow==1.13.1

# Install some other packages.
RUN apt-get update
RUN apt-get install -y screen

# More environment variables
ENV PYTHONPATH=${WO_ROOT}/code:${WO_ROOT}/code/python:${PYTHONPATH}
ENV TVM_NDK_CC=/opt/android-toolchain-arm64/bin/aarch64-linux-android-g++
