v0.0.4
def @main(%data: Tensor[(1, 1, 192, 320), float32], %LAYERTYPE.CONVOLUTIONAL0_weight: Tensor[(16, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL0_gamma: Tensor[(16), float32], %LAYERTYPE.CONVOLUTIONAL0_beta: Tensor[(16), float32], %LAYERTYPE.CONVOLUTIONAL0_moving_mean: Tensor[(16), float32], %LAYERTYPE.CONVOLUTIONAL0_moving_var: Tensor[(16), float32], %LAYERTYPE.CONVOLUTIONAL2_weight: Tensor[(32, 16, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL2_gamma: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL2_beta: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL2_moving_mean: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL2_moving_var: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL4_weight: Tensor[(64, 32, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL4_gamma: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL4_beta: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL4_moving_mean: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL4_moving_var: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL6_weight: Tensor[(128, 64, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL6_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL6_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL6_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL6_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL7_weight: Tensor[(32, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL7_gamma: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL7_beta: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL7_moving_mean: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL7_moving_var: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL9_weight: Tensor[(128, 32, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL9_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL9_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL9_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL9_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL10_weight: Tensor[(32, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL10_gamma: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL10_beta: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL10_moving_mean: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL10_moving_var: Tensor[(32), float32], %LAYERTYPE.CONVOLUTIONAL12_weight: Tensor[(128, 32, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL12_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL12_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL12_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL12_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL13_weight: Tensor[(64, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL13_gamma: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL13_beta: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL13_moving_mean: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL13_moving_var: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL15_weight: Tensor[(128, 64, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL15_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL15_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL15_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL15_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL16_weight: Tensor[(64, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL16_gamma: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL16_beta: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL16_moving_mean: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL16_moving_var: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL23_weight: Tensor[(64, 64, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL23_gamma: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL23_beta: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL23_moving_mean: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL23_moving_var: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL26_weight: Tensor[(128, 96, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL26_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL26_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL26_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL26_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL27_weight: Tensor[(64, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL27_gamma: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL27_beta: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL27_moving_mean: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL27_moving_var: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL28_weight: Tensor[(128, 64, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL28_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL28_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL28_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL28_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL29_weight: Tensor[(18, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL29_bias: Tensor[(18), float32], %LAYERTYPE.YOLO30_mask: Tensor[(3), int32], %LAYERTYPE.YOLO30_bias: Tensor[(12), float32], %LAYERTYPE.YOLO30_attr: Tensor[(6), int32], %LAYERTYPE.CONVOLUTIONAL17_weight: Tensor[(128, 64, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL17_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL17_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL17_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL17_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL18_weight: Tensor[(64, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL18_gamma: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL18_beta: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL18_moving_mean: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL18_moving_var: Tensor[(64), float32], %LAYERTYPE.CONVOLUTIONAL19_weight: Tensor[(128, 64, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL19_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL19_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL19_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL19_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL20_weight: Tensor[(18, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL20_bias: Tensor[(18), float32], %LAYERTYPE.YOLO21_mask: Tensor[(3), int32], %LAYERTYPE.YOLO21_bias: Tensor[(12), float32], %LAYERTYPE.YOLO21_attr: Tensor[(6), int32]) -> (Tensor[(1, 18, 12, 20), float32], Tensor[(3), int32], Tensor[(12), float32], Tensor[(6), int32], Tensor[(1, 18, 6, 10), float32], Tensor[(3), int32], Tensor[(12), float32], Tensor[(6), int32]) {
  %0 = nn.conv2d(%data, %LAYERTYPE.CONVOLUTIONAL0_weight, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 192, 320), float32] */;
  %1 = nn.batch_norm(%0, %LAYERTYPE.CONVOLUTIONAL0_gamma, %LAYERTYPE.CONVOLUTIONAL0_beta, %LAYERTYPE.CONVOLUTIONAL0_moving_mean, %LAYERTYPE.CONVOLUTIONAL0_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 16, 192, 320), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %2 = %1.0;
  %3 = nn.leaky_relu(%2, alpha=0.1f) /* ty=Tensor[(1, 16, 192, 320), float32] */;
  %4 = nn.max_pool2d(%3, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 16, 96, 160), float32] */;
  %5 = nn.conv2d(%4, %LAYERTYPE.CONVOLUTIONAL2_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 96, 160), float32] */;
  %6 = nn.batch_norm(%5, %LAYERTYPE.CONVOLUTIONAL2_gamma, %LAYERTYPE.CONVOLUTIONAL2_beta, %LAYERTYPE.CONVOLUTIONAL2_moving_mean, %LAYERTYPE.CONVOLUTIONAL2_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 32, 96, 160), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %7 = %6.0;
  %8 = nn.leaky_relu(%7, alpha=0.1f) /* ty=Tensor[(1, 32, 96, 160), float32] */;
  %9 = nn.max_pool2d(%8, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 32, 48, 80), float32] */;
  %10 = nn.conv2d(%9, %LAYERTYPE.CONVOLUTIONAL4_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 48, 80), float32] */;
  %11 = nn.batch_norm(%10, %LAYERTYPE.CONVOLUTIONAL4_gamma, %LAYERTYPE.CONVOLUTIONAL4_beta, %LAYERTYPE.CONVOLUTIONAL4_moving_mean, %LAYERTYPE.CONVOLUTIONAL4_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 48, 80), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %12 = %11.0;
  %13 = nn.leaky_relu(%12, alpha=0.1f) /* ty=Tensor[(1, 64, 48, 80), float32] */;
  %14 = nn.max_pool2d(%13, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 64, 24, 40), float32] */;
  %15 = nn.conv2d(%14, %LAYERTYPE.CONVOLUTIONAL6_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 24, 40), float32] */;
  %16 = nn.batch_norm(%15, %LAYERTYPE.CONVOLUTIONAL6_gamma, %LAYERTYPE.CONVOLUTIONAL6_beta, %LAYERTYPE.CONVOLUTIONAL6_moving_mean, %LAYERTYPE.CONVOLUTIONAL6_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 24, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %17 = %16.0;
  %18 = nn.leaky_relu(%17, alpha=0.1f) /* ty=Tensor[(1, 128, 24, 40), float32] */;
  %19 = nn.conv2d(%18, %LAYERTYPE.CONVOLUTIONAL7_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 24, 40), float32] */;
  %20 = nn.batch_norm(%19, %LAYERTYPE.CONVOLUTIONAL7_gamma, %LAYERTYPE.CONVOLUTIONAL7_beta, %LAYERTYPE.CONVOLUTIONAL7_moving_mean, %LAYERTYPE.CONVOLUTIONAL7_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 32, 24, 40), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %21 = %20.0;
  %22 = nn.leaky_relu(%21, alpha=0.1f) /* ty=Tensor[(1, 32, 24, 40), float32] */;
  %23 = nn.max_pool2d(%22, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 32, 12, 20), float32] */;
  %24 = nn.conv2d(%23, %LAYERTYPE.CONVOLUTIONAL9_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 12, 20), float32] */;
  %25 = nn.batch_norm(%24, %LAYERTYPE.CONVOLUTIONAL9_gamma, %LAYERTYPE.CONVOLUTIONAL9_beta, %LAYERTYPE.CONVOLUTIONAL9_moving_mean, %LAYERTYPE.CONVOLUTIONAL9_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 12, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %26 = %25.0;
  %27 = nn.leaky_relu(%26, alpha=0.1f) /* ty=Tensor[(1, 128, 12, 20), float32] */;
  %28 = nn.conv2d(%27, %LAYERTYPE.CONVOLUTIONAL10_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 12, 20), float32] */;
  %29 = nn.batch_norm(%28, %LAYERTYPE.CONVOLUTIONAL10_gamma, %LAYERTYPE.CONVOLUTIONAL10_beta, %LAYERTYPE.CONVOLUTIONAL10_moving_mean, %LAYERTYPE.CONVOLUTIONAL10_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 32, 12, 20), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %30 = %29.0;
  %31 = nn.leaky_relu(%30, alpha=0.1f) /* ty=Tensor[(1, 32, 12, 20), float32] */;
  %32 = nn.max_pool2d(%31, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 32, 6, 10), float32] */;
  %33 = nn.conv2d(%32, %LAYERTYPE.CONVOLUTIONAL12_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 10), float32] */;
  %34 = nn.batch_norm(%33, %LAYERTYPE.CONVOLUTIONAL12_gamma, %LAYERTYPE.CONVOLUTIONAL12_beta, %LAYERTYPE.CONVOLUTIONAL12_moving_mean, %LAYERTYPE.CONVOLUTIONAL12_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 6, 10), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %35 = %34.0;
  %36 = nn.leaky_relu(%35, alpha=0.1f) /* ty=Tensor[(1, 128, 6, 10), float32] */;
  %37 = nn.conv2d(%36, %LAYERTYPE.CONVOLUTIONAL13_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %38 = nn.batch_norm(%37, %LAYERTYPE.CONVOLUTIONAL13_gamma, %LAYERTYPE.CONVOLUTIONAL13_beta, %LAYERTYPE.CONVOLUTIONAL13_moving_mean, %LAYERTYPE.CONVOLUTIONAL13_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 6, 10), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %39 = %38.0;
  %40 = nn.leaky_relu(%39, alpha=0.1f) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %41 = nn.pad(%40, pad_value=-3.40282e+38f, pad_width=[[0, 0], [0, 0], [0, 1], [0, 1]]) /* ty=Tensor[(1, 64, 7, 11), float32] */;
  %42 = nn.max_pool2d(%41, pool_size=[2, 2]) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %43 = nn.conv2d(%42, %LAYERTYPE.CONVOLUTIONAL15_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 10), float32] */;
  %44 = nn.batch_norm(%43, %LAYERTYPE.CONVOLUTIONAL15_gamma, %LAYERTYPE.CONVOLUTIONAL15_beta, %LAYERTYPE.CONVOLUTIONAL15_moving_mean, %LAYERTYPE.CONVOLUTIONAL15_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 6, 10), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %45 = %44.0;
  %46 = nn.leaky_relu(%45, alpha=0.1f) /* ty=Tensor[(1, 128, 6, 10), float32] */;
  %47 = nn.conv2d(%46, %LAYERTYPE.CONVOLUTIONAL16_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %48 = nn.batch_norm(%47, %LAYERTYPE.CONVOLUTIONAL16_gamma, %LAYERTYPE.CONVOLUTIONAL16_beta, %LAYERTYPE.CONVOLUTIONAL16_moving_mean, %LAYERTYPE.CONVOLUTIONAL16_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 6, 10), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %49 = %48.0;
  %50 = nn.leaky_relu(%49, alpha=0.1f) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %51 = nn.conv2d(%50, %LAYERTYPE.CONVOLUTIONAL23_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %52 = nn.batch_norm(%51, %LAYERTYPE.CONVOLUTIONAL23_gamma, %LAYERTYPE.CONVOLUTIONAL23_beta, %LAYERTYPE.CONVOLUTIONAL23_moving_mean, %LAYERTYPE.CONVOLUTIONAL23_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 6, 10), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %53 = %52.0;
  %54 = nn.leaky_relu(%53, alpha=0.1f) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %55 = nn.upsampling(%54, scale_h=2f, scale_w=2f) /* ty=Tensor[(1, 64, 12, 20), float32] */;
  %56 = (%55, %31);
  %57 = concatenate(%56, axis=1) /* ty=Tensor[(1, 96, 12, 20), float32] */;
  %58 = nn.conv2d(%57, %LAYERTYPE.CONVOLUTIONAL26_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 12, 20), float32] */;
  %59 = nn.batch_norm(%58, %LAYERTYPE.CONVOLUTIONAL26_gamma, %LAYERTYPE.CONVOLUTIONAL26_beta, %LAYERTYPE.CONVOLUTIONAL26_moving_mean, %LAYERTYPE.CONVOLUTIONAL26_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 12, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %60 = %59.0;
  %61 = nn.leaky_relu(%60, alpha=0.1f) /* ty=Tensor[(1, 128, 12, 20), float32] */;
  %62 = nn.conv2d(%61, %LAYERTYPE.CONVOLUTIONAL27_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 12, 20), float32] */;
  %63 = nn.batch_norm(%62, %LAYERTYPE.CONVOLUTIONAL27_gamma, %LAYERTYPE.CONVOLUTIONAL27_beta, %LAYERTYPE.CONVOLUTIONAL27_moving_mean, %LAYERTYPE.CONVOLUTIONAL27_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 12, 20), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %64 = %63.0;
  %65 = nn.leaky_relu(%64, alpha=0.1f) /* ty=Tensor[(1, 64, 12, 20), float32] */;
  %66 = nn.conv2d(%65, %LAYERTYPE.CONVOLUTIONAL28_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 12, 20), float32] */;
  %67 = nn.batch_norm(%66, %LAYERTYPE.CONVOLUTIONAL28_gamma, %LAYERTYPE.CONVOLUTIONAL28_beta, %LAYERTYPE.CONVOLUTIONAL28_moving_mean, %LAYERTYPE.CONVOLUTIONAL28_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 12, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %68 = %67.0;
  %69 = nn.leaky_relu(%68, alpha=0.1f) /* ty=Tensor[(1, 128, 12, 20), float32] */;
  %70 = nn.conv2d(%69, %LAYERTYPE.CONVOLUTIONAL29_weight, padding=[0, 0, 0, 0], channels=18, kernel_size=[1, 1]) /* ty=Tensor[(1, 18, 12, 20), float32] */;
  %71 = nn.bias_add(%70, %LAYERTYPE.CONVOLUTIONAL29_bias) /* ty=Tensor[(1, 18, 12, 20), float32] */;
  %72 = reshape(%71, newshape=[1, 3, 6, 12, 20]) /* ty=Tensor[(1, 3, 6, 12, 20), float32] */;
  %73 = split(%72, indices_or_sections=[2, 4], axis=2) /* ty=(Tensor[(1, 3, 2, 12, 20), float32], Tensor[(1, 3, 2, 12, 20), float32], Tensor[(1, 3, 2, 12, 20), float32]) */;
  %74 = %73.0;
  %75 = sigmoid(%74) /* ty=Tensor[(1, 3, 2, 12, 20), float32] */;
  %76 = %73.1;
  %77 = %73.2;
  %78 = sigmoid(%77) /* ty=Tensor[(1, 3, 2, 12, 20), float32] */;
  %79 = (%75, %76, %78);
  %80 = concatenate(%79, axis=2) /* ty=Tensor[(1, 3, 6, 12, 20), float32] */;
  %81 = reshape(%80, newshape=[1, 18, 12, 20]) /* ty=Tensor[(1, 18, 12, 20), float32] */;
  %82 = nn.conv2d(%50, %LAYERTYPE.CONVOLUTIONAL17_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 10), float32] */;
  %83 = nn.batch_norm(%82, %LAYERTYPE.CONVOLUTIONAL17_gamma, %LAYERTYPE.CONVOLUTIONAL17_beta, %LAYERTYPE.CONVOLUTIONAL17_moving_mean, %LAYERTYPE.CONVOLUTIONAL17_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 6, 10), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %84 = %83.0;
  %85 = nn.leaky_relu(%84, alpha=0.1f) /* ty=Tensor[(1, 128, 6, 10), float32] */;
  %86 = nn.conv2d(%85, %LAYERTYPE.CONVOLUTIONAL18_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %87 = nn.batch_norm(%86, %LAYERTYPE.CONVOLUTIONAL18_gamma, %LAYERTYPE.CONVOLUTIONAL18_beta, %LAYERTYPE.CONVOLUTIONAL18_moving_mean, %LAYERTYPE.CONVOLUTIONAL18_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 6, 10), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %88 = %87.0;
  %89 = nn.leaky_relu(%88, alpha=0.1f) /* ty=Tensor[(1, 64, 6, 10), float32] */;
  %90 = nn.conv2d(%89, %LAYERTYPE.CONVOLUTIONAL19_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 10), float32] */;
  %91 = nn.batch_norm(%90, %LAYERTYPE.CONVOLUTIONAL19_gamma, %LAYERTYPE.CONVOLUTIONAL19_beta, %LAYERTYPE.CONVOLUTIONAL19_moving_mean, %LAYERTYPE.CONVOLUTIONAL19_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 6, 10), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %92 = %91.0;
  %93 = nn.leaky_relu(%92, alpha=0.1f) /* ty=Tensor[(1, 128, 6, 10), float32] */;
  %94 = nn.conv2d(%93, %LAYERTYPE.CONVOLUTIONAL20_weight, padding=[0, 0, 0, 0], channels=18, kernel_size=[1, 1]) /* ty=Tensor[(1, 18, 6, 10), float32] */;
  %95 = nn.bias_add(%94, %LAYERTYPE.CONVOLUTIONAL20_bias) /* ty=Tensor[(1, 18, 6, 10), float32] */;
  %96 = reshape(%95, newshape=[1, 3, 6, 6, 10]) /* ty=Tensor[(1, 3, 6, 6, 10), float32] */;
  %97 = split(%96, indices_or_sections=[2, 4], axis=2) /* ty=(Tensor[(1, 3, 2, 6, 10), float32], Tensor[(1, 3, 2, 6, 10), float32], Tensor[(1, 3, 2, 6, 10), float32]) */;
  %98 = %97.0;
  %99 = sigmoid(%98) /* ty=Tensor[(1, 3, 2, 6, 10), float32] */;
  %100 = %97.1;
  %101 = %97.2;
  %102 = sigmoid(%101) /* ty=Tensor[(1, 3, 2, 6, 10), float32] */;
  %103 = (%99, %100, %102);
  %104 = concatenate(%103, axis=2) /* ty=Tensor[(1, 3, 6, 6, 10), float32] */;
  %105 = reshape(%104, newshape=[1, 18, 6, 10]) /* ty=Tensor[(1, 18, 6, 10), float32] */;
  (%81, %LAYERTYPE.YOLO30_mask, %LAYERTYPE.YOLO30_bias, %LAYERTYPE.YOLO30_attr, %105, %LAYERTYPE.YOLO21_mask, %LAYERTYPE.YOLO21_bias, %LAYERTYPE.YOLO21_attr)
}
