v0.0.4
def @main(%data: Tensor[(1, 3, 352, 608), float32], %LAYERTYPE.CONVOLUTIONAL0_weight: Tensor[(12, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL0_gamma: Tensor[(12), float32], %LAYERTYPE.CONVOLUTIONAL0_beta: Tensor[(12), float32], %LAYERTYPE.CONVOLUTIONAL0_moving_mean: Tensor[(12), float32], %LAYERTYPE.CONVOLUTIONAL0_moving_var: Tensor[(12), float32], %LAYERTYPE.CONVOLUTIONAL1_weight: Tensor[(6, 12, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL1_gamma: Tensor[(6), float32], %LAYERTYPE.CONVOLUTIONAL1_beta: Tensor[(6), float32], %LAYERTYPE.CONVOLUTIONAL1_moving_mean: Tensor[(6), float32], %LAYERTYPE.CONVOLUTIONAL1_moving_var: Tensor[(6), float32], %LAYERTYPE.CONVOLUTIONAL3_weight: Tensor[(24, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL3_gamma: Tensor[(24), float32], %LAYERTYPE.CONVOLUTIONAL3_beta: Tensor[(24), float32], %LAYERTYPE.CONVOLUTIONAL3_moving_mean: Tensor[(24), float32], %LAYERTYPE.CONVOLUTIONAL3_moving_var: Tensor[(24), float32], %LAYERTYPE.CONVOLUTIONAL4_weight: Tensor[(12, 24, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL4_gamma: Tensor[(12), float32], %LAYERTYPE.CONVOLUTIONAL4_beta: Tensor[(12), float32], %LAYERTYPE.CONVOLUTIONAL4_moving_mean: Tensor[(12), float32], %LAYERTYPE.CONVOLUTIONAL4_moving_var: Tensor[(12), float32], %LAYERTYPE.CONVOLUTIONAL6_weight: Tensor[(48, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL6_gamma: Tensor[(48), float32], %LAYERTYPE.CONVOLUTIONAL6_beta: Tensor[(48), float32], %LAYERTYPE.CONVOLUTIONAL6_moving_mean: Tensor[(48), float32], %LAYERTYPE.CONVOLUTIONAL6_moving_var: Tensor[(48), float32], %LAYERTYPE.CONVOLUTIONAL7_weight: Tensor[(24, 48, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL7_gamma: Tensor[(24), float32], %LAYERTYPE.CONVOLUTIONAL7_beta: Tensor[(24), float32], %LAYERTYPE.CONVOLUTIONAL7_moving_mean: Tensor[(24), float32], %LAYERTYPE.CONVOLUTIONAL7_moving_var: Tensor[(24), float32], %LAYERTYPE.CONVOLUTIONAL9_weight: Tensor[(96, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL9_gamma: Tensor[(96), float32], %LAYERTYPE.CONVOLUTIONAL9_beta: Tensor[(96), float32], %LAYERTYPE.CONVOLUTIONAL9_moving_mean: Tensor[(96), float32], %LAYERTYPE.CONVOLUTIONAL9_moving_var: Tensor[(96), float32], %LAYERTYPE.CONVOLUTIONAL10_weight: Tensor[(48, 96, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL10_gamma: Tensor[(48), float32], %LAYERTYPE.CONVOLUTIONAL10_beta: Tensor[(48), float32], %LAYERTYPE.CONVOLUTIONAL10_moving_mean: Tensor[(48), float32], %LAYERTYPE.CONVOLUTIONAL10_moving_var: Tensor[(48), float32], %LAYERTYPE.CONVOLUTIONAL12_weight: Tensor[(192, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL12_gamma: Tensor[(192), float32], %LAYERTYPE.CONVOLUTIONAL12_beta: Tensor[(192), float32], %LAYERTYPE.CONVOLUTIONAL12_moving_mean: Tensor[(192), float32], %LAYERTYPE.CONVOLUTIONAL12_moving_var: Tensor[(192), float32], %LAYERTYPE.CONVOLUTIONAL13_weight: Tensor[(96, 192, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL13_gamma: Tensor[(96), float32], %LAYERTYPE.CONVOLUTIONAL13_beta: Tensor[(96), float32], %LAYERTYPE.CONVOLUTIONAL13_moving_mean: Tensor[(96), float32], %LAYERTYPE.CONVOLUTIONAL13_moving_var: Tensor[(96), float32], %LAYERTYPE.CONVOLUTIONAL15_weight: Tensor[(384, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL15_gamma: Tensor[(384), float32], %LAYERTYPE.CONVOLUTIONAL15_beta: Tensor[(384), float32], %LAYERTYPE.CONVOLUTIONAL15_moving_mean: Tensor[(384), float32], %LAYERTYPE.CONVOLUTIONAL15_moving_var: Tensor[(384), float32], %LAYERTYPE.CONVOLUTIONAL16_weight: Tensor[(192, 384, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL16_gamma: Tensor[(192), float32], %LAYERTYPE.CONVOLUTIONAL16_beta: Tensor[(192), float32], %LAYERTYPE.CONVOLUTIONAL16_moving_mean: Tensor[(192), float32], %LAYERTYPE.CONVOLUTIONAL16_moving_var: Tensor[(192), float32], %LAYERTYPE.CONVOLUTIONAL18_weight: Tensor[(768, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL18_gamma: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL18_beta: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL18_moving_mean: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL18_moving_var: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL19_weight: Tensor[(384, 768, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL19_gamma: Tensor[(384), float32], %LAYERTYPE.CONVOLUTIONAL19_beta: Tensor[(384), float32], %LAYERTYPE.CONVOLUTIONAL19_moving_mean: Tensor[(384), float32], %LAYERTYPE.CONVOLUTIONAL19_moving_var: Tensor[(384), float32], %LAYERTYPE.CONVOLUTIONAL20_weight: Tensor[(256, 384, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL20_gamma: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL20_beta: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL20_moving_mean: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL20_moving_var: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL27_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL27_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL27_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL27_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL27_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL36_weight: Tensor[(128, 224, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL36_gamma: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL36_beta: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL36_moving_mean: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL36_moving_var: Tensor[(128), float32], %LAYERTYPE.CONVOLUTIONAL39_weight: Tensor[(352, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL39_gamma: Tensor[(352), float32], %LAYERTYPE.CONVOLUTIONAL39_beta: Tensor[(352), float32], %LAYERTYPE.CONVOLUTIONAL39_moving_mean: Tensor[(352), float32], %LAYERTYPE.CONVOLUTIONAL39_moving_var: Tensor[(352), float32], %LAYERTYPE.CONVOLUTIONAL40_weight: Tensor[(256, 352, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL40_gamma: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL40_beta: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL40_moving_mean: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL40_moving_var: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL41_weight: Tensor[(768, 256, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL41_gamma: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL41_beta: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL41_moving_mean: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL41_moving_var: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL42_weight: Tensor[(24, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL42_bias: Tensor[(24), float32], %LAYERTYPE.YOLO43_mask: Tensor[(3), int32], %LAYERTYPE.YOLO43_bias: Tensor[(18), float32], %LAYERTYPE.YOLO43_attr: Tensor[(6), int32], %LAYERTYPE.CONVOLUTIONAL30_weight: Tensor[(448, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL30_gamma: Tensor[(448), float32], %LAYERTYPE.CONVOLUTIONAL30_beta: Tensor[(448), float32], %LAYERTYPE.CONVOLUTIONAL30_moving_mean: Tensor[(448), float32], %LAYERTYPE.CONVOLUTIONAL30_moving_var: Tensor[(448), float32], %LAYERTYPE.CONVOLUTIONAL31_weight: Tensor[(256, 448, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL31_gamma: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL31_beta: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL31_moving_mean: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL31_moving_var: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL32_weight: Tensor[(768, 256, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL32_gamma: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL32_beta: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL32_moving_mean: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL32_moving_var: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL33_weight: Tensor[(24, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL33_bias: Tensor[(24), float32], %LAYERTYPE.YOLO34_mask: Tensor[(3), int32], %LAYERTYPE.YOLO34_bias: Tensor[(18), float32], %LAYERTYPE.YOLO34_attr: Tensor[(6), int32], %LAYERTYPE.CONVOLUTIONAL21_weight: Tensor[(512, 1, 3, 3), float32], %LAYERTYPE.CONVOLUTIONAL21_gamma: Tensor[(512), float32], %LAYERTYPE.CONVOLUTIONAL21_beta: Tensor[(512), float32], %LAYERTYPE.CONVOLUTIONAL21_moving_mean: Tensor[(512), float32], %LAYERTYPE.CONVOLUTIONAL21_moving_var: Tensor[(512), float32], %LAYERTYPE.CONVOLUTIONAL22_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL22_gamma: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL22_beta: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL22_moving_mean: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL22_moving_var: Tensor[(256), float32], %LAYERTYPE.CONVOLUTIONAL23_weight: Tensor[(768, 256, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL23_gamma: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL23_beta: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL23_moving_mean: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL23_moving_var: Tensor[(768), float32], %LAYERTYPE.CONVOLUTIONAL24_weight: Tensor[(24, 128, 1, 1), float32], %LAYERTYPE.CONVOLUTIONAL24_bias: Tensor[(24), float32], %LAYERTYPE.YOLO25_mask: Tensor[(3), int32], %LAYERTYPE.YOLO25_bias: Tensor[(18), float32], %LAYERTYPE.YOLO25_attr: Tensor[(6), int32]) -> (Tensor[(1, 24, 44, 76), float32], Tensor[(3), int32], Tensor[(18), float32], Tensor[(6), int32], Tensor[(1, 24, 22, 38), float32], Tensor[(3), int32], Tensor[(18), float32], Tensor[(6), int32], Tensor[(1, 24, 11, 19), float32], Tensor[(3), int32], Tensor[(18), float32], Tensor[(6), int32]) {
  %0 = nn.conv2d(%data, %LAYERTYPE.CONVOLUTIONAL0_weight, padding=[1, 1, 1, 1], groups=3, channels=12, kernel_size=[3, 3]) /* ty=Tensor[(1, 12, 352, 608), float32] */;
  %1 = nn.batch_norm(%0, %LAYERTYPE.CONVOLUTIONAL0_gamma, %LAYERTYPE.CONVOLUTIONAL0_beta, %LAYERTYPE.CONVOLUTIONAL0_moving_mean, %LAYERTYPE.CONVOLUTIONAL0_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 12, 352, 608), float32], Tensor[(12), float32], Tensor[(12), float32]) */;
  %2 = %1.0;
  %3 = nn.leaky_relu(%2, alpha=0.1f) /* ty=Tensor[(1, 12, 352, 608), float32] */;
  %4 = nn.conv2d(%3, %LAYERTYPE.CONVOLUTIONAL1_weight, padding=[0, 0, 0, 0], channels=6, kernel_size=[1, 1]) /* ty=Tensor[(1, 6, 352, 608), float32] */;
  %5 = nn.batch_norm(%4, %LAYERTYPE.CONVOLUTIONAL1_gamma, %LAYERTYPE.CONVOLUTIONAL1_beta, %LAYERTYPE.CONVOLUTIONAL1_moving_mean, %LAYERTYPE.CONVOLUTIONAL1_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 6, 352, 608), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %6 = %5.0;
  %7 = nn.leaky_relu(%6, alpha=0.1f) /* ty=Tensor[(1, 6, 352, 608), float32] */;
  %8 = nn.max_pool2d(%7, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 6, 176, 304), float32] */;
  %9 = nn.conv2d(%8, %LAYERTYPE.CONVOLUTIONAL3_weight, padding=[1, 1, 1, 1], groups=6, channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 176, 304), float32] */;
  %10 = nn.batch_norm(%9, %LAYERTYPE.CONVOLUTIONAL3_gamma, %LAYERTYPE.CONVOLUTIONAL3_beta, %LAYERTYPE.CONVOLUTIONAL3_moving_mean, %LAYERTYPE.CONVOLUTIONAL3_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 24, 176, 304), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %11 = %10.0;
  %12 = nn.leaky_relu(%11, alpha=0.1f) /* ty=Tensor[(1, 24, 176, 304), float32] */;
  %13 = nn.conv2d(%12, %LAYERTYPE.CONVOLUTIONAL4_weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 176, 304), float32] */;
  %14 = nn.batch_norm(%13, %LAYERTYPE.CONVOLUTIONAL4_gamma, %LAYERTYPE.CONVOLUTIONAL4_beta, %LAYERTYPE.CONVOLUTIONAL4_moving_mean, %LAYERTYPE.CONVOLUTIONAL4_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 12, 176, 304), float32], Tensor[(12), float32], Tensor[(12), float32]) */;
  %15 = %14.0;
  %16 = nn.leaky_relu(%15, alpha=0.1f) /* ty=Tensor[(1, 12, 176, 304), float32] */;
  %17 = nn.max_pool2d(%16, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 12, 88, 152), float32] */;
  %18 = nn.conv2d(%17, %LAYERTYPE.CONVOLUTIONAL6_weight, padding=[1, 1, 1, 1], groups=12, channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 88, 152), float32] */;
  %19 = nn.batch_norm(%18, %LAYERTYPE.CONVOLUTIONAL6_gamma, %LAYERTYPE.CONVOLUTIONAL6_beta, %LAYERTYPE.CONVOLUTIONAL6_moving_mean, %LAYERTYPE.CONVOLUTIONAL6_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 48, 88, 152), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %20 = %19.0;
  %21 = nn.leaky_relu(%20, alpha=0.1f) /* ty=Tensor[(1, 48, 88, 152), float32] */;
  %22 = nn.conv2d(%21, %LAYERTYPE.CONVOLUTIONAL7_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 88, 152), float32] */;
  %23 = nn.batch_norm(%22, %LAYERTYPE.CONVOLUTIONAL7_gamma, %LAYERTYPE.CONVOLUTIONAL7_beta, %LAYERTYPE.CONVOLUTIONAL7_moving_mean, %LAYERTYPE.CONVOLUTIONAL7_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 24, 88, 152), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %24 = %23.0;
  %25 = nn.leaky_relu(%24, alpha=0.1f) /* ty=Tensor[(1, 24, 88, 152), float32] */;
  %26 = nn.max_pool2d(%25, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 24, 44, 76), float32] */;
  %27 = nn.conv2d(%26, %LAYERTYPE.CONVOLUTIONAL9_weight, padding=[1, 1, 1, 1], groups=24, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 44, 76), float32] */;
  %28 = nn.batch_norm(%27, %LAYERTYPE.CONVOLUTIONAL9_gamma, %LAYERTYPE.CONVOLUTIONAL9_beta, %LAYERTYPE.CONVOLUTIONAL9_moving_mean, %LAYERTYPE.CONVOLUTIONAL9_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 96, 44, 76), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %29 = %28.0;
  %30 = nn.leaky_relu(%29, alpha=0.1f) /* ty=Tensor[(1, 96, 44, 76), float32] */;
  %31 = nn.conv2d(%30, %LAYERTYPE.CONVOLUTIONAL10_weight, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 44, 76), float32] */;
  %32 = nn.batch_norm(%31, %LAYERTYPE.CONVOLUTIONAL10_gamma, %LAYERTYPE.CONVOLUTIONAL10_beta, %LAYERTYPE.CONVOLUTIONAL10_moving_mean, %LAYERTYPE.CONVOLUTIONAL10_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 48, 44, 76), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %33 = %32.0;
  %34 = nn.leaky_relu(%33, alpha=0.1f) /* ty=Tensor[(1, 48, 44, 76), float32] */;
  %35 = nn.max_pool2d(%34, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 48, 22, 38), float32] */;
  %36 = nn.conv2d(%35, %LAYERTYPE.CONVOLUTIONAL12_weight, padding=[1, 1, 1, 1], groups=48, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 22, 38), float32] */;
  %37 = nn.batch_norm(%36, %LAYERTYPE.CONVOLUTIONAL12_gamma, %LAYERTYPE.CONVOLUTIONAL12_beta, %LAYERTYPE.CONVOLUTIONAL12_moving_mean, %LAYERTYPE.CONVOLUTIONAL12_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 192, 22, 38), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %38 = %37.0;
  %39 = nn.leaky_relu(%38, alpha=0.1f) /* ty=Tensor[(1, 192, 22, 38), float32] */;
  %40 = nn.conv2d(%39, %LAYERTYPE.CONVOLUTIONAL13_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 22, 38), float32] */;
  %41 = nn.batch_norm(%40, %LAYERTYPE.CONVOLUTIONAL13_gamma, %LAYERTYPE.CONVOLUTIONAL13_beta, %LAYERTYPE.CONVOLUTIONAL13_moving_mean, %LAYERTYPE.CONVOLUTIONAL13_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 96, 22, 38), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %42 = %41.0;
  %43 = nn.leaky_relu(%42, alpha=0.1f) /* ty=Tensor[(1, 96, 22, 38), float32] */;
  %44 = nn.max_pool2d(%43, pool_size=[2, 2], strides=[2, 2]) /* ty=Tensor[(1, 96, 11, 19), float32] */;
  %45 = nn.conv2d(%44, %LAYERTYPE.CONVOLUTIONAL15_weight, padding=[1, 1, 1, 1], groups=96, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 11, 19), float32] */;
  %46 = nn.batch_norm(%45, %LAYERTYPE.CONVOLUTIONAL15_gamma, %LAYERTYPE.CONVOLUTIONAL15_beta, %LAYERTYPE.CONVOLUTIONAL15_moving_mean, %LAYERTYPE.CONVOLUTIONAL15_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 384, 11, 19), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %47 = %46.0;
  %48 = nn.leaky_relu(%47, alpha=0.1f) /* ty=Tensor[(1, 384, 11, 19), float32] */;
  %49 = nn.conv2d(%48, %LAYERTYPE.CONVOLUTIONAL16_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 11, 19), float32] */;
  %50 = nn.batch_norm(%49, %LAYERTYPE.CONVOLUTIONAL16_gamma, %LAYERTYPE.CONVOLUTIONAL16_beta, %LAYERTYPE.CONVOLUTIONAL16_moving_mean, %LAYERTYPE.CONVOLUTIONAL16_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 192, 11, 19), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %51 = %50.0;
  %52 = nn.leaky_relu(%51, alpha=0.1f) /* ty=Tensor[(1, 192, 11, 19), float32] */;
  %53 = nn.pad(%52, pad_value=-3.40282e+38f, pad_width=[[0, 0], [0, 0], [0, 1], [0, 1]]) /* ty=Tensor[(1, 192, 12, 20), float32] */;
  %54 = nn.max_pool2d(%53, pool_size=[2, 2]) /* ty=Tensor[(1, 192, 11, 19), float32] */;
  %55 = nn.conv2d(%54, %LAYERTYPE.CONVOLUTIONAL18_weight, padding=[1, 1, 1, 1], groups=192, channels=768, kernel_size=[3, 3]) /* ty=Tensor[(1, 768, 11, 19), float32] */;
  %56 = nn.batch_norm(%55, %LAYERTYPE.CONVOLUTIONAL18_gamma, %LAYERTYPE.CONVOLUTIONAL18_beta, %LAYERTYPE.CONVOLUTIONAL18_moving_mean, %LAYERTYPE.CONVOLUTIONAL18_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 768, 11, 19), float32], Tensor[(768), float32], Tensor[(768), float32]) */;
  %57 = %56.0;
  %58 = nn.leaky_relu(%57, alpha=0.1f) /* ty=Tensor[(1, 768, 11, 19), float32] */;
  %59 = nn.conv2d(%58, %LAYERTYPE.CONVOLUTIONAL19_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 11, 19), float32] */;
  %60 = nn.batch_norm(%59, %LAYERTYPE.CONVOLUTIONAL19_gamma, %LAYERTYPE.CONVOLUTIONAL19_beta, %LAYERTYPE.CONVOLUTIONAL19_moving_mean, %LAYERTYPE.CONVOLUTIONAL19_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 384, 11, 19), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %61 = %60.0;
  %62 = nn.leaky_relu(%61, alpha=0.1f) /* ty=Tensor[(1, 384, 11, 19), float32] */;
  %63 = nn.conv2d(%62, %LAYERTYPE.CONVOLUTIONAL20_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 11, 19), float32] */;
  %64 = nn.batch_norm(%63, %LAYERTYPE.CONVOLUTIONAL20_gamma, %LAYERTYPE.CONVOLUTIONAL20_beta, %LAYERTYPE.CONVOLUTIONAL20_moving_mean, %LAYERTYPE.CONVOLUTIONAL20_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 11, 19), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %65 = %64.0;
  %66 = nn.leaky_relu(%65, alpha=0.1f) /* ty=Tensor[(1, 256, 11, 19), float32] */;
  %67 = nn.conv2d(%66, %LAYERTYPE.CONVOLUTIONAL27_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 11, 19), float32] */;
  %68 = nn.batch_norm(%67, %LAYERTYPE.CONVOLUTIONAL27_gamma, %LAYERTYPE.CONVOLUTIONAL27_beta, %LAYERTYPE.CONVOLUTIONAL27_moving_mean, %LAYERTYPE.CONVOLUTIONAL27_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 11, 19), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %69 = %68.0;
  %70 = nn.leaky_relu(%69, alpha=0.1f) /* ty=Tensor[(1, 128, 11, 19), float32] */;
  %71 = nn.upsampling(%70, scale_h=2f, scale_w=2f) /* ty=Tensor[(1, 128, 22, 38), float32] */;
  %72 = (%71, %43);
  %73 = concatenate(%72, axis=1) /* ty=Tensor[(1, 224, 22, 38), float32] */;
  %74 = nn.conv2d(%73, %LAYERTYPE.CONVOLUTIONAL36_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 22, 38), float32] */;
  %75 = nn.batch_norm(%74, %LAYERTYPE.CONVOLUTIONAL36_gamma, %LAYERTYPE.CONVOLUTIONAL36_beta, %LAYERTYPE.CONVOLUTIONAL36_moving_mean, %LAYERTYPE.CONVOLUTIONAL36_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 22, 38), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %76 = %75.0;
  %77 = nn.leaky_relu(%76, alpha=0.1f) /* ty=Tensor[(1, 128, 22, 38), float32] */;
  %78 = nn.upsampling(%77, scale_h=2f, scale_w=2f) /* ty=Tensor[(1, 128, 44, 76), float32] */;
  %79 = (%78, %34);
  %80 = concatenate(%79, axis=1) /* ty=Tensor[(1, 176, 44, 76), float32] */;
  %81 = nn.conv2d(%80, %LAYERTYPE.CONVOLUTIONAL39_weight, padding=[1, 1, 1, 1], groups=176, channels=352, kernel_size=[3, 3]) /* ty=Tensor[(1, 352, 44, 76), float32] */;
  %82 = nn.batch_norm(%81, %LAYERTYPE.CONVOLUTIONAL39_gamma, %LAYERTYPE.CONVOLUTIONAL39_beta, %LAYERTYPE.CONVOLUTIONAL39_moving_mean, %LAYERTYPE.CONVOLUTIONAL39_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 352, 44, 76), float32], Tensor[(352), float32], Tensor[(352), float32]) */;
  %83 = %82.0;
  %84 = nn.leaky_relu(%83, alpha=0.1f) /* ty=Tensor[(1, 352, 44, 76), float32] */;
  %85 = nn.conv2d(%84, %LAYERTYPE.CONVOLUTIONAL40_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 44, 76), float32] */;
  %86 = nn.batch_norm(%85, %LAYERTYPE.CONVOLUTIONAL40_gamma, %LAYERTYPE.CONVOLUTIONAL40_beta, %LAYERTYPE.CONVOLUTIONAL40_moving_mean, %LAYERTYPE.CONVOLUTIONAL40_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 44, 76), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %87 = %86.0;
  %88 = nn.leaky_relu(%87, alpha=0.1f) /* ty=Tensor[(1, 256, 44, 76), float32] */;
  %89 = nn.conv2d(%88, %LAYERTYPE.CONVOLUTIONAL41_weight, padding=[0, 0, 0, 0], channels=768, kernel_size=[1, 1]) /* ty=Tensor[(1, 768, 44, 76), float32] */;
  %90 = nn.batch_norm(%89, %LAYERTYPE.CONVOLUTIONAL41_gamma, %LAYERTYPE.CONVOLUTIONAL41_beta, %LAYERTYPE.CONVOLUTIONAL41_moving_mean, %LAYERTYPE.CONVOLUTIONAL41_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 768, 44, 76), float32], Tensor[(768), float32], Tensor[(768), float32]) */;
  %91 = %90.0;
  %92 = nn.leaky_relu(%91, alpha=0.1f) /* ty=Tensor[(1, 768, 44, 76), float32] */;
  %93 = nn.conv2d(%92, %LAYERTYPE.CONVOLUTIONAL42_weight, padding=[0, 0, 0, 0], groups=6, channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 44, 76), float32] */;
  %94 = nn.bias_add(%93, %LAYERTYPE.CONVOLUTIONAL42_bias) /* ty=Tensor[(1, 24, 44, 76), float32] */;
  %95 = reshape(%94, newshape=[1, 3, 8, 44, 76]) /* ty=Tensor[(1, 3, 8, 44, 76), float32] */;
  %96 = split(%95, indices_or_sections=[2, 4], axis=2) /* ty=(Tensor[(1, 3, 2, 44, 76), float32], Tensor[(1, 3, 2, 44, 76), float32], Tensor[(1, 3, 4, 44, 76), float32]) */;
  %97 = %96.0;
  %98 = sigmoid(%97) /* ty=Tensor[(1, 3, 2, 44, 76), float32] */;
  %99 = %96.1;
  %100 = %96.2;
  %101 = sigmoid(%100) /* ty=Tensor[(1, 3, 4, 44, 76), float32] */;
  %102 = (%98, %99, %101);
  %103 = concatenate(%102, axis=2) /* ty=Tensor[(1, 3, 8, 44, 76), float32] */;
  %104 = reshape(%103, newshape=[1, 24, 44, 76]) /* ty=Tensor[(1, 24, 44, 76), float32] */;
  %105 = nn.conv2d(%73, %LAYERTYPE.CONVOLUTIONAL30_weight, padding=[1, 1, 1, 1], groups=224, channels=448, kernel_size=[3, 3]) /* ty=Tensor[(1, 448, 22, 38), float32] */;
  %106 = nn.batch_norm(%105, %LAYERTYPE.CONVOLUTIONAL30_gamma, %LAYERTYPE.CONVOLUTIONAL30_beta, %LAYERTYPE.CONVOLUTIONAL30_moving_mean, %LAYERTYPE.CONVOLUTIONAL30_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 448, 22, 38), float32], Tensor[(448), float32], Tensor[(448), float32]) */;
  %107 = %106.0;
  %108 = nn.leaky_relu(%107, alpha=0.1f) /* ty=Tensor[(1, 448, 22, 38), float32] */;
  %109 = nn.conv2d(%108, %LAYERTYPE.CONVOLUTIONAL31_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 22, 38), float32] */;
  %110 = nn.batch_norm(%109, %LAYERTYPE.CONVOLUTIONAL31_gamma, %LAYERTYPE.CONVOLUTIONAL31_beta, %LAYERTYPE.CONVOLUTIONAL31_moving_mean, %LAYERTYPE.CONVOLUTIONAL31_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 22, 38), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %111 = %110.0;
  %112 = nn.leaky_relu(%111, alpha=0.1f) /* ty=Tensor[(1, 256, 22, 38), float32] */;
  %113 = nn.conv2d(%112, %LAYERTYPE.CONVOLUTIONAL32_weight, padding=[0, 0, 0, 0], channels=768, kernel_size=[1, 1]) /* ty=Tensor[(1, 768, 22, 38), float32] */;
  %114 = nn.batch_norm(%113, %LAYERTYPE.CONVOLUTIONAL32_gamma, %LAYERTYPE.CONVOLUTIONAL32_beta, %LAYERTYPE.CONVOLUTIONAL32_moving_mean, %LAYERTYPE.CONVOLUTIONAL32_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 768, 22, 38), float32], Tensor[(768), float32], Tensor[(768), float32]) */;
  %115 = %114.0;
  %116 = nn.leaky_relu(%115, alpha=0.1f) /* ty=Tensor[(1, 768, 22, 38), float32] */;
  %117 = nn.conv2d(%116, %LAYERTYPE.CONVOLUTIONAL33_weight, padding=[0, 0, 0, 0], groups=6, channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 22, 38), float32] */;
  %118 = nn.bias_add(%117, %LAYERTYPE.CONVOLUTIONAL33_bias) /* ty=Tensor[(1, 24, 22, 38), float32] */;
  %119 = reshape(%118, newshape=[1, 3, 8, 22, 38]) /* ty=Tensor[(1, 3, 8, 22, 38), float32] */;
  %120 = split(%119, indices_or_sections=[2, 4], axis=2) /* ty=(Tensor[(1, 3, 2, 22, 38), float32], Tensor[(1, 3, 2, 22, 38), float32], Tensor[(1, 3, 4, 22, 38), float32]) */;
  %121 = %120.0;
  %122 = sigmoid(%121) /* ty=Tensor[(1, 3, 2, 22, 38), float32] */;
  %123 = %120.1;
  %124 = %120.2;
  %125 = sigmoid(%124) /* ty=Tensor[(1, 3, 4, 22, 38), float32] */;
  %126 = (%122, %123, %125);
  %127 = concatenate(%126, axis=2) /* ty=Tensor[(1, 3, 8, 22, 38), float32] */;
  %128 = reshape(%127, newshape=[1, 24, 22, 38]) /* ty=Tensor[(1, 24, 22, 38), float32] */;
  %129 = nn.conv2d(%66, %LAYERTYPE.CONVOLUTIONAL21_weight, padding=[1, 1, 1, 1], groups=256, channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 11, 19), float32] */;
  %130 = nn.batch_norm(%129, %LAYERTYPE.CONVOLUTIONAL21_gamma, %LAYERTYPE.CONVOLUTIONAL21_beta, %LAYERTYPE.CONVOLUTIONAL21_moving_mean, %LAYERTYPE.CONVOLUTIONAL21_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 11, 19), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %131 = %130.0;
  %132 = nn.leaky_relu(%131, alpha=0.1f) /* ty=Tensor[(1, 512, 11, 19), float32] */;
  %133 = nn.conv2d(%132, %LAYERTYPE.CONVOLUTIONAL22_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 11, 19), float32] */;
  %134 = nn.batch_norm(%133, %LAYERTYPE.CONVOLUTIONAL22_gamma, %LAYERTYPE.CONVOLUTIONAL22_beta, %LAYERTYPE.CONVOLUTIONAL22_moving_mean, %LAYERTYPE.CONVOLUTIONAL22_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 11, 19), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %135 = %134.0;
  %136 = nn.leaky_relu(%135, alpha=0.1f) /* ty=Tensor[(1, 256, 11, 19), float32] */;
  %137 = nn.conv2d(%136, %LAYERTYPE.CONVOLUTIONAL23_weight, padding=[0, 0, 0, 0], channels=768, kernel_size=[1, 1]) /* ty=Tensor[(1, 768, 11, 19), float32] */;
  %138 = nn.batch_norm(%137, %LAYERTYPE.CONVOLUTIONAL23_gamma, %LAYERTYPE.CONVOLUTIONAL23_beta, %LAYERTYPE.CONVOLUTIONAL23_moving_mean, %LAYERTYPE.CONVOLUTIONAL23_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 768, 11, 19), float32], Tensor[(768), float32], Tensor[(768), float32]) */;
  %139 = %138.0;
  %140 = nn.leaky_relu(%139, alpha=0.1f) /* ty=Tensor[(1, 768, 11, 19), float32] */;
  %141 = nn.conv2d(%140, %LAYERTYPE.CONVOLUTIONAL24_weight, padding=[0, 0, 0, 0], groups=6, channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 11, 19), float32] */;
  %142 = nn.bias_add(%141, %LAYERTYPE.CONVOLUTIONAL24_bias) /* ty=Tensor[(1, 24, 11, 19), float32] */;
  %143 = reshape(%142, newshape=[1, 3, 8, 11, 19]) /* ty=Tensor[(1, 3, 8, 11, 19), float32] */;
  %144 = split(%143, indices_or_sections=[2, 4], axis=2) /* ty=(Tensor[(1, 3, 2, 11, 19), float32], Tensor[(1, 3, 2, 11, 19), float32], Tensor[(1, 3, 4, 11, 19), float32]) */;
  %145 = %144.0;
  %146 = sigmoid(%145) /* ty=Tensor[(1, 3, 2, 11, 19), float32] */;
  %147 = %144.1;
  %148 = %144.2;
  %149 = sigmoid(%148) /* ty=Tensor[(1, 3, 4, 11, 19), float32] */;
  %150 = (%146, %147, %149);
  %151 = concatenate(%150, axis=2) /* ty=Tensor[(1, 3, 8, 11, 19), float32] */;
  %152 = reshape(%151, newshape=[1, 24, 11, 19]) /* ty=Tensor[(1, 24, 11, 19), float32] */;
  (%104, %LAYERTYPE.YOLO43_mask, %LAYERTYPE.YOLO43_bias, %LAYERTYPE.YOLO43_attr, %128, %LAYERTYPE.YOLO34_mask, %LAYERTYPE.YOLO34_bias, %LAYERTYPE.YOLO34_attr, %152, %LAYERTYPE.YOLO25_mask, %LAYERTYPE.YOLO25_bias, %LAYERTYPE.YOLO25_attr)
}
